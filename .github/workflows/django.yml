name: Django CI (docker-compose)

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-check:
    runs-on: ubuntu-latest

    steps:
      # 1. Забираем код
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Создаём .env.dev из GitHub Secrets
      - name: Create .env.dev
        run: |
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env.dev
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.dev
          echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env.dev
          
          echo "DATABASE=${{ secrets.DATABASE }}" >> .env.dev
          echo "SQL_ENGINE=${{ secrets.SQL_ENGINE }}" >> .env.dev
          echo "SQL_PORT=${{ secrets.SQL_PORT }}" >> .env.dev
          echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> .env.dev

          echo "SQL_ROOT_PASSWORD=${{ secrets.SQL_ROOT_PASSWORD }}" >> .env.dev
          echo "SQL_USER=${{ secrets.SQL_USER }}" >> .env.dev
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> .env.dev
          echo "SQL_HOST=${{ secrets.SQL_HOST }}" >> .env.dev

      # 3. Устанавливаем docker-compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # 4. Собираем и запускаем контейнеры в фоне
      - name: Build and run containers
        run: docker-compose up -d --build

      # 5. Ждём, пока MySQL + Django инициализируются
      - name: Wait for services to be ready
        run: sleep 20

      # 6. (Опционально) Смотрим логи db и web для отладки
      - name: Show logs for db
        run: docker-compose logs db

      - name: Show logs for web
        run: docker-compose logs web

      # 7. Проверяем, что Django-сервер отвечает на http://localhost:8000/
      - name: Check Django server
        run: curl --fail http://localhost:8000/ || exit 1

      # 8. Выключаем контейнеры
      - name: Shutdown
        if: always()
        run: docker-compose down
